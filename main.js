(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(15),i=t.n(r),a=t(645),o=t.n(a)()(i());o.push([e.id,".showcase {\r\n  width: 100%;\r\n  height: 100vh;\r\n  padding: 4rem 4rem;\r\n}\r\n\r\nli {\r\n  list-style: none;\r\n}\r\n\r\n.parameters {\r\n  width: 50%;\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  color: white; \r\n}\r\n\r\n.temperature {\r\n  font-size: 50px;\r\n  font-weight: 700;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.measures {\r\n  font-size: 40px;\r\n  font-weight: 500;\r\n}\r\n\r\nimg {\r\n  height: 100px;\r\n  width: 100px;\r\n}\r\n\r\n.description {\r\n  font-size: 20px;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,UAAU;EACV,oCAAoC;EACpC,YAAY;AACd;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,aAAa;EACb,uBAAuB;AACzB;;AAEA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,YAAY;AACd;;AAEA;EACE,eAAe;AACjB",sourcesContent:[".showcase {\r\n  width: 100%;\r\n  height: 100vh;\r\n  padding: 4rem 4rem;\r\n}\r\n\r\nli {\r\n  list-style: none;\r\n}\r\n\r\n.parameters {\r\n  width: 50%;\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  color: white; \r\n}\r\n\r\n.temperature {\r\n  font-size: 50px;\r\n  font-weight: 700;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.measures {\r\n  font-size: 40px;\r\n  font-weight: 500;\r\n}\r\n\r\nimg {\r\n  height: 100px;\r\n  width: 100px;\r\n}\r\n\r\n.description {\r\n  font-size: 20px;\r\n}"],sourceRoot:""}]);const c=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&i[d[0]]||(t&&(d[2]?d[2]="".concat(t," and ").concat(d[2]):d[2]=t),n.push(d))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,i=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,i=!1,a=void 0;try{for(var o,c=e[Symbol.iterator]();!(r=(o=c.next()).done)&&(t.push(o.value),!n||t.length!==n);r=!0);}catch(e){i=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(i)throw a}}return t}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[1],o=i[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),s="/*# ".concat(d," */"),l=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[a].concat(l).concat([s]).join("\n")}return[a].join("\n")}},379:(e,n,t)=>{var r,i=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),a=[];function o(e){for(var n=-1,t=0;t<a.length;t++)if(a[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},r=[],i=0;i<e.length;i++){var c=e[i],d=n.base?c[0]+n.base:c[0],s=t[d]||0,l="".concat(d," ").concat(s);t[d]=s+1;var u=o(l),p={css:c[1],media:c[2],sourceMap:c[3]};-1!==u?(a[u].references++,a[u].updater(p)):a.push({identifier:l,updater:f(p,n),references:1}),r.push(l)}return r}function d(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=t.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var o=i(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}return n}var s,l=(s=[],function(e,n){return s[e]=n,s.filter(Boolean).join("\n")});function u(e,n,t,r){var i=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=l(n,i);else{var a=document.createTextNode(i),o=e.childNodes;o[n]&&e.removeChild(o[n]),o.length?e.insertBefore(a,o[n]):e.appendChild(a)}}function p(e,n,t){var r=t.css,i=t.media,a=t.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,h=0;function f(e,n){var t,r,i;if(n.singleton){var a=h++;t=m||(m=d(n)),r=u.bind(null,t,a,!1),i=u.bind(null,t,a,!0)}else t=d(n),r=p.bind(null,t,n),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else i()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var i=o(t[r]);a[i].references--}for(var d=c(e,n),s=0;s<t.length;s++){var l=o(t[s]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}t=d}}}},445:(e,n,t)=>{e.exports=t.p+"293bac2756c51d63f036.jpg"}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{var e=t(445);const n=document.querySelector("#content"),r=document.createElement("button"),i=document.createElement("div"),a=document.createElement("div"),o=document.createElement("div"),c=document.createElement("h3"),d=document.createElement("div"),s=document.createElement("div"),l=document.createElement("div"),u=document.createElement("div"),p=document.createElement("div"),m=document.createElement("div"),h=document.createElement("div"),f=document.createElement("div"),A=document.createElement("div"),v=new Image,g=document.createElement("div"),C=document.createElement("div"),b=document.createElement("div"),y=document.createElement("div");y.classList.add("showcase","text-center"),y.style.background=`url(${e})`,y.style.backgroundRepeat="no-repeat",y.style.backgroundSize="cover";const E=async e=>{const n=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&units=metric&APPID=71fbfe5f66beeee255c8447a6ae9b37b`),t=await n.json();if(200===t.cod)return t;throw new Error("City not found. Please try again.")},w=async(e,t)=>{const E=document.createElement("div"),w=document.createElement("div");w.innerHTML="";const x=e.main.temp;a.innerHTML=new Date,i.innerHTML=`${x}&degC`,i.classList.add("temperature");const L=document.createElement("div");L.classList.add("d-flex","justify-content-between"),o.textContent=e.weather[0].description,o.classList.add("text-center","description");const j=e.weather[0].icon;v.src=`https://openweathermap.org/img/wn/${j}.png`,c.textContent=e.name,c.classList.add("text-center");const T=document.createElement("div");T.classList.add("justify-content-between","d-flex","measures"),d.textContent="Humidity",s.textContent=e.main.humidity,l.innerHTML="%",h.textContent="Pressure",f.textContent=e.main.pressure,A.innerHTML="hPa",u.innerHTML="Wind",p.innerHTML=e.wind.speed,m.innerHTML="m/s",g.appendChild(d),g.appendChild(s),g.appendChild(l),C.appendChild(h),C.appendChild(f),C.appendChild(A),b.appendChild(u),b.appendChild(p),b.appendChild(m),T.appendChild(g),T.appendChild(C),T.appendChild(b),r.innerHTML="Farenheit",r.classList.add("d-flex","justify-content-end","btn","text-dark","bg-light","font-weight-bold");const M=(1.8*x+32).toFixed(2),B=x;r.addEventListener("click",((e,n,t,a)=>{r.addEventListener("click",(r=>{r.preventDefault();const o=r.target;"imperial"===a?(e=t,i.innerHTML=`${e}&degC`,a="metric",o.innerHTML="Fahrenheit"):(e=n,i.innerHTML=`${e}&degF`,a="imperial",o.innerHTML="Celcius")}))})(x,M,B,t)),L.appendChild(c),L.appendChild(v),w.appendChild(L),w.appendChild(a),w.appendChild(o),w.appendChild(i),w.appendChild(T),w.appendChild(r),w.classList.add("parameters","px-5"),E.appendChild(w),y.appendChild(E),n.appendChild(y)};var x=t(379),L=t.n(x),j=t(426);L()(j.Z,{insert:"head",singleton:!1}),j.Z.locals,(()=>{const e=document.createElement("form"),t=document.createElement("input");t.setAttribute("id","search"),t.type="search",t.placeholder="Enter city ",t.classList.add("form-control","w-50"),e.addEventListener("submit",(n=>{n.preventDefault();const r=t.value;e.reset(),E(r).then((e=>{w(e)})).catch((e=>e.message))})),t.value="",e.appendChild(t),y.appendChild(e),n.appendChild(y)})(),window.onload=async()=>{E("Nairobi").then((e=>{w(e)}))},w()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,